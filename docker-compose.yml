networks:
  debezium-network:
    driver: bridge

services:
  # MySQL as source database
  mysql:
    image: mysql:${MYSQL_VERSION}
    container_name: mysql
    hostname: ${MYSQL_HOST}
    ports:
      - "${MYSQL_PORT}:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/data:/var/lib/mysql
    command: >
      --server-id=${MYSQL_SERVER_ID}
      --log-bin=mysql-bin
      --binlog-format=${MYSQL_BINLOG_FORMAT}
      --binlog-row-image=${MYSQL_BINLOG_ROW_IMAGE}
      --expire-logs-days=${MYSQL_EXPIRE_LOGS_DAYS}
      --binlog-rows-query-log-events=ON
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network
    
  # RabbitMQ for event streaming
  rabbitmq:
    image: rabbitmq:${RABBITMQ_VERSION}-management
    container_name: rabbitmq
    hostname: ${RABBITMQ_HOST}
    ports:
      - "${RABBITMQ_PORT}:5672"   # AMQP port
      - "${RABBITMQ_MANAGEMENT_PORT}:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: ${RABBITMQ_VHOST}
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network
    
  # MongoDB as sink (first instance)
  mongodb1:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb1
    ports:
      - "${MONGODB1_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - ./mongodb/data1:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network

  # MongoDB as sink (second instance)
  mongodb2:
    image: mongo:${MONGODB_VERSION}
    container_name: mongodb2
    ports:
      - "${MONGODB2_PORT}:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    volumes:
      - ./mongodb/data2:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network
    
  # Debezium Server (standalone)
  debezium:
    image: debezium/server:${DEBEZIUM_VERSION}
    container_name: debezium
    restart: unless-stopped
    ports:
      - "${QUARKUS_HTTP_PORT}:8080"   # Quarkus management and health endpoints
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    command: >
      sh -c "mkdir -p /debezium/data && 
             /debezium/run.sh"
    environment:
      # Debezium configuration
      DEBEZIUM_SINK_TYPE: ${DEBEZIUM_SINK_TYPE}
      DEBEZIUM_SOURCE_CONNECTOR_CLASS: ${DEBEZIUM_CONNECTOR_CLASS}
      DEBEZIUM_SOURCE_OFFSET_STORAGE_FILE_FILENAME: ${DEBEZIUM_OFFSET_STORAGE_FILE}
      DEBEZIUM_SOURCE_OFFSET_FLUSH_INTERVAL_MS: ${DEBEZIUM_OFFSET_FLUSH_INTERVAL_MS}
      
      # MySQL source configuration
      DEBEZIUM_SOURCE_DATABASE_HOSTNAME: ${MYSQL_HOST}
      DEBEZIUM_SOURCE_DATABASE_PORT: ${MYSQL_PORT}
      DEBEZIUM_SOURCE_DATABASE_USER: ${MYSQL_USER}
      DEBEZIUM_SOURCE_DATABASE_PASSWORD: ${MYSQL_PASSWORD}
      DEBEZIUM_SOURCE_DATABASE_SERVER_ID: ${DEBEZIUM_SERVER_ID}
      DEBEZIUM_SOURCE_TOPIC_PREFIX: ${DEBEZIUM_TOPIC_PREFIX}
      DEBEZIUM_SOURCE_DATABASE_INCLUDE_LIST: ${DEBEZIUM_SOURCE_DB_INCLUDE_LIST}
      DEBEZIUM_SOURCE_TABLE_INCLUDE_LIST: ${DEBEZIUM_SOURCE_TABLE_INCLUDE_LIST}
      DEBEZIUM_SOURCE_SCHEMA_HISTORY_INTERNAL_STORE_ONLY_CAPTURED_TABLES_DDL: "true"
      DEBEZIUM_SOURCE_SCHEMA_HISTORY_INTERNAL_FILE_FILENAME: ${DEBEZIUM_SCHEMA_HISTORY_FILE}
      DEBEZIUM_SOURCE_SCHEMA_HISTORY_INTERNAL: ${DEBEZIUM_SCHEMA_HISTORY_CLASS}
      
      # RabbitMQ sink configuration
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_HOST: ${RABBITMQ_HOST}
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_PORT: ${RABBITMQ_PORT}
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_USERNAME: ${RABBITMQ_USER}
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_PASSWORD: ${RABBITMQ_PASSWORD}
      DEBEZIUM_SINK_RABBITMQ_EXCHANGE: ${RABBITMQ_EXCHANGE}
      DEBEZIUM_SINK_RABBITMQ_ROUTINGKEY: ${RABBITMQ_ROUTING_KEY}
      DEBEZIUM_SINK_RABBITMQ_ACK: true
      
      # Format configuration
      DEBEZIUM_FORMAT_VALUE: ${DEBEZIUM_FORMAT_VALUE}
      DEBEZIUM_FORMAT_KEY: ${DEBEZIUM_FORMAT_KEY}
      DEBEZIUM_KEY_CONVERTER_SCHEMAS_ENABLE: ${DEBEZIUM_KEY_CONVERTER_SCHEMAS_ENABLE}
      
      # Asynchronous Engine Properties
      DEBEZIUM_ENGINE_RECORD_PROCESSING_THREADS: ${DEBEZIUM_RECORD_PROCESSING_THREADS}
      
      # Quarkus Monitoring Configuration
      QUARKUS_HTTP_PORT: ${QUARKUS_HTTP_PORT}
      QUARKUS_MANAGEMENT_ENABLED: ${QUARKUS_MANAGEMENT_ENABLED}
      QUARKUS_SMALLRYE_HEALTH_UI_ENABLE: ${QUARKUS_SMALLRYE_HEALTH_UI_ENABLE}
      QUARKUS_SMALLRYE_METRICS_ENABLED: ${QUARKUS_SMALLRYE_METRICS_ENABLED}
    volumes:
      - debezium-data:/debezium/data
      - ./debezium-server/conf:/debezium/conf
    networks:
      - debezium-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    
  # Go consumer
  go-consumer:
    build:
      context: ./go-consumer
      dockerfile: Dockerfile
    container_name: go-consumer
    depends_on:
      - rabbitmq
      - mongodb1
      - mongodb2
    environment:
      - RABBITMQ_URI=${RABBITMQ_URI}
      - MONGODB_URI_1=${MONGODB1_URI}
      - MONGODB_URI_2=${MONGODB2_URI}
      - MONGODB_DATABASE=${MONGODB_DATABASE}
      - MONGODB_COLLECTION_PREFIX=${MONGODB_COLLECTION_PREFIX}
    volumes:
      - ./go-consumer/config:/app/config
    networks:
      - debezium-network

  # Data generator
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - MYSQL_HOST=${MYSQL_HOST}
      - MYSQL_PORT=${MYSQL_PORT}
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_DATABASE=${MYSQL_DATABASE}
    restart: "no"  # Run once and exit
    networks:
      - debezium-network

volumes:
  debezium-data:
