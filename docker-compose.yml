networks:
  debezium-network:
    driver: bridge

services:
  # MySQL as source database
  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: debezium
      MYSQL_USER: debezium
      MYSQL_PASSWORD: dbz
      MYSQL_DATABASE: inventory
    volumes:
      - ./mysql/init:/docker-entrypoint-initdb.d
      - ./mysql/data:/var/lib/mysql
    command: >
      --server-id=1
      --log-bin=mysql-bin
      --binlog-format=ROW
      --binlog-row-image=FULL
      --expire-logs-days=10
      --binlog-rows-query-log-events=ON
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pdebezium"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network
    
  # RabbitMQ for event streaming
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - ./rabbitmq/data:/var/lib/rabbitmq
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network
    
  # MongoDB as sink (first instance)
  mongodb1:
    image: mongo:6.0
    container_name: mongodb1
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - ./mongodb/data1:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network

  # MongoDB as sink (second instance)
  mongodb2:
    image: mongo:6.0
    container_name: mongodb2
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      - ./mongodb/data2:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "'db.adminCommand(\"ping\")'"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - debezium-network
    
  # Debezium Server (standalone)
  debezium:
    image: debezium/server:3.0.0.Final
    container_name: debezium
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      # Debezium configuration
      DEBEZIUM_SINK_TYPE: rabbitmq
      DEBEZIUM_SOURCE_CONNECTOR_CLASS: io.debezium.connector.mysql.MySqlConnector
      DEBEZIUM_SOURCE_OFFSET_STORAGE_FILE_FILENAME: /debezium/data/offsets.dat
      DEBEZIUM_SOURCE_OFFSET_FLUSH_INTERVAL_MS: 0
      
      # MySQL source configuration
      DEBEZIUM_SOURCE_DATABASE_HOSTNAME: mysql
      DEBEZIUM_SOURCE_DATABASE_PORT: 3306
      DEBEZIUM_SOURCE_DATABASE_USER: debezium
      DEBEZIUM_SOURCE_DATABASE_PASSWORD: dbz
      DEBEZIUM_SOURCE_DATABASE_SERVER_ID: 184054
      DEBEZIUM_SOURCE_TOPIC_PREFIX: mysql
      DEBEZIUM_SOURCE_DATABASE_INCLUDE_LIST: inventory
      DEBEZIUM_SOURCE_TABLE_INCLUDE_LIST: inventory.customers,inventory.orders
      DEBEZIUM_SOURCE_SCHEMA_HISTORY_INTERNAL_STORE_ONLY_CAPTURED_TABLES_DDL: "true"
      DEBEZIUM_SOURCE_SCHEMA_HISTORY_INTERNAL_FILE_FILENAME: /debezium/data/schema_history.dat
      DEBEZIUM_SOURCE_SCHEMA_HISTORY_INTERNAL: io.debezium.storage.file.history.FileSchemaHistory
      
      # RabbitMQ sink configuration
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_HOST: rabbitmq
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_PORT: 5672
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_USERNAME: guest
      DEBEZIUM_SINK_RABBITMQ_CONNECTION_PASSWORD: guest
      DEBEZIUM_SINK_RABBITMQ_EXCHANGE: mysql-events
      DEBEZIUM_SINK_RABBITMQ_ROUTINGKEY: mysql-cdc
      DEBEZIUM_SINK_RABBITMQ_ACK: true
      
      # Additional configuration
      DEBEZIUM_FORMAT_VALUE: json
      DEBEZIUM_FORMAT_KEY: json
    volumes:
      - ./debezium-server/data:/debezium/data
    networks:
      - debezium-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/q/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    
  # Go consumer
  go-consumer:
    build:
      context: ./go-consumer
      dockerfile: Dockerfile
    container_name: go-consumer
    depends_on:
      - rabbitmq
      - mongodb1
      - mongodb2
    environment:
      - RABBITMQ_URI=amqp://guest:guest@rabbitmq:5672/
      - MONGODB_URI_1=mongodb://admin:admin@mongodb1:27017/
      - MONGODB_URI_2=mongodb://admin:admin@mongodb2:27017/
    volumes:
      - ./go-consumer/config:/app/config
    networks:
      - debezium-network

  # Data generator
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    container_name: data-generator
    depends_on:
      mysql:
        condition: service_healthy
    environment:
      - MYSQL_HOST=mysql
      - MYSQL_PORT=3306
      - MYSQL_USER=root
      - MYSQL_PASSWORD=debezium
      - MYSQL_DATABASE=inventory
    restart: "no"  # Run once and exit
    networks:
      - debezium-network
