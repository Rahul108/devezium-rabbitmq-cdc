#!/bin/bash

# Debezium Server startup script
# This script sets up the Debezium configuration based on enabled sources

# Debug information
echo "Starting Debezium setup script"
echo "Current directory: $(pwd)"
echo "Checking Debezium paths:"
ls -la /opt/debezium/ 2>/dev/null || echo "Path /opt/debezium/ not found"
ls -la /debezium/ 2>/dev/null || echo "Path /debezium/ not found"
echo "Looking for Debezium runner JAR:"
find /debezium -name "*runner.jar" 2>/dev/null || echo "No runner.jar found in /debezium"
find /opt -name "*runner.jar" 2>/dev/null || echo "No runner.jar found in /opt"
echo "Checking for Debezium run scripts:"
find /debezium -name "run*" 2>/dev/null || echo "No run scripts found in /debezium"
find /opt -name "run*" 2>/dev/null || echo "No run scripts found in /opt"
echo "------------------------"

# Function to trim leading/trailing whitespace
trim() {
    local var="$*"
    var="${var#"${var%%[![:space:]]*}"}"   # remove leading whitespace
    var="${var%"${var##*[![:space:]]}"}"   # remove trailing whitespace
    echo -n "$var"
}

# Check which sources are enabled
ENABLE_MYSQL=$(trim "${ENABLE_MYSQL:-false}")
ENABLE_POSTGRESQL=$(trim "${ENABLE_POSTGRESQL:-false}")
ENABLE_MONGODB_SOURCE=$(trim "${ENABLE_MONGODB_SOURCE:-false}")
ENABLE_ORACLE=$(trim "${ENABLE_ORACLE:-false}")
ENABLE_CASSANDRA=$(trim "${ENABLE_CASSANDRA:-false}")

# Default to at least one source if none are specified
if [[ "$ENABLE_MYSQL" != "true" && "$ENABLE_POSTGRESQL" != "true" && "$ENABLE_MONGODB_SOURCE" != "true" && "$ENABLE_ORACLE" != "true" && "$ENABLE_CASSANDRA" != "true" ]]; then
    echo "No sources enabled, defaulting to MySQL"
    ENABLE_MYSQL="true"
fi

# Path to the application.properties file
APP_PROPS_FILE="/debezium/conf/application.properties"

# Create a temporary properties file (in the same filesystem)
TMP_PROPS_FILE="/debezium/conf/application.properties.tmp"
touch "$TMP_PROPS_FILE"

# Add the base configuration
cat > "$TMP_PROPS_FILE" << EOL
# Debezium Server Configuration
# Generated by startup script

# Common settings
debezium.sink.type=${DEBEZIUM_SINK_TYPE}
debezium.sink.rabbitmq.delivery.mode=2
debezium.source.offset.storage=org.apache.kafka.connect.storage.FileOffsetBackingStore
debezium.source.offset.storage.file.filename=${DEBEZIUM_OFFSET_STORAGE_FILE}
debezium.source.offset.flush.interval.ms=${DEBEZIUM_OFFSET_FLUSH_INTERVAL_MS}

# Format settings
debezium.format.value=${DEBEZIUM_FORMAT_VALUE}
debezium.format.key=${DEBEZIUM_FORMAT_KEY}

# RabbitMQ sink configuration
debezium.sink.rabbitmq.connection.host=${DEBEZIUM_SINK_RABBITMQ_CONNECTION_HOST}
debezium.sink.rabbitmq.connection.port=${DEBEZIUM_SINK_RABBITMQ_CONNECTION_PORT}
debezium.sink.rabbitmq.connection.username=${DEBEZIUM_SINK_RABBITMQ_CONNECTION_USERNAME}
debezium.sink.rabbitmq.connection.password=${DEBEZIUM_SINK_RABBITMQ_CONNECTION_PASSWORD}
debezium.sink.rabbitmq.exchange=${DEBEZIUM_SINK_RABBITMQ_EXCHANGE}
debezium.sink.rabbitmq.routingkey=${DEBEZIUM_SINK_RABBITMQ_ROUTINGKEY}
debezium.sink.rabbitmq.ack=true

# Topic routing
debezium.transforms=route
debezium.transforms.route.type=org.apache.kafka.connect.transforms.RegexRouter
debezium.transforms.route.regex=.*
debezium.transforms.route.replacement=cdc.events

EOL

# Configure enabled sources
if [[ "$ENABLE_MYSQL" == "true" ]]; then
    echo "Configuring MySQL source"
    cat >> "$TMP_PROPS_FILE" << EOL
# MySQL Source Configuration
debezium.source.connector.class=io.debezium.connector.mysql.MySqlConnector
debezium.source.database.hostname=${MYSQL_HOST}
debezium.source.database.port=${MYSQL_PORT}
debezium.source.database.user=${MYSQL_USER}
debezium.source.database.password=${MYSQL_PASSWORD}
debezium.source.database.server.id=${DEBEZIUM_SERVER_ID}
debezium.source.database.server.name=${MYSQL_TOPIC_PREFIX}
debezium.source.database.include.list=${MYSQL_SOURCE_DB_INCLUDE_LIST}
debezium.source.table.include.list=${MYSQL_SOURCE_TABLE_INCLUDE_LIST}
debezium.source.snapshot.mode=initial
debezium.source.database.history=io.debezium.relational.history.FileDatabaseHistory
debezium.source.database.history.file.filename=${MYSQL_SCHEMA_HISTORY_FILE}
debezium.source.schema.history.internal=io.debezium.storage.file.history.FileSchemaHistory
debezium.source.schema.history.internal.file.filename=${MYSQL_SCHEMA_HISTORY_FILE}
debezium.source.schema.history.internal.store.only.captured.tables.ddl=true

EOL
elif [[ "$ENABLE_POSTGRESQL" == "true" ]]; then
    echo "Configuring PostgreSQL source"
    cat >> "$TMP_PROPS_FILE" << EOL
# PostgreSQL Source Configuration
debezium.source.connector.class=io.debezium.connector.postgresql.PostgresConnector
debezium.source.database.hostname=${POSTGRESQL_HOST}
debezium.source.database.port=${POSTGRESQL_PORT}
debezium.source.database.user=${POSTGRESQL_USER}
debezium.source.database.password=${POSTGRESQL_PASSWORD}
debezium.source.database.dbname=${POSTGRESQL_DATABASE}
debezium.source.database.server.name=${POSTGRESQL_TOPIC_PREFIX}
debezium.source.schema.include.list=${POSTGRESQL_SCHEMA}
debezium.source.table.include.list=${POSTGRESQL_SOURCE_TABLE_INCLUDE_LIST}
debezium.source.plugin.name=pgoutput
debezium.source.snapshot.mode=initial
debezium.source.schema.history.internal=io.debezium.storage.file.history.FileSchemaHistory
debezium.source.schema.history.internal.file.filename=${POSTGRESQL_SCHEMA_HISTORY_FILE}
debezium.source.schema.history.internal.store.only.captured.tables.ddl=true

EOL
elif [[ "$ENABLE_MONGODB_SOURCE" == "true" ]]; then
    echo "Configuring MongoDB source"
    cat >> "$TMP_PROPS_FILE" << EOL
# MongoDB Source Configuration
debezium.source.connector.class=io.debezium.connector.mongodb.MongoDbConnector
debezium.source.mongodb.connection.string=mongodb://${MONGODB_SOURCE_USER}:${MONGODB_SOURCE_PASSWORD}@${MONGODB_SOURCE_HOST}:27017/?replicaSet=${MONGODB_SOURCE_REPLICA_SET}
debezium.source.mongodb.user=${MONGODB_SOURCE_USER}
debezium.source.mongodb.password=${MONGODB_SOURCE_PASSWORD}
debezium.source.database.server.name=${MONGODB_SOURCE_TOPIC_PREFIX}
debezium.source.collection.include.list=${MONGODB_SOURCE_COLLECTION_INCLUDE_LIST}
debezium.source.snapshot.mode=initial

EOL
elif [[ "$ENABLE_ORACLE" == "true" ]]; then
    echo "Configuring Oracle source"
    cat >> "$TMP_PROPS_FILE" << EOL
# Oracle Source Configuration
debezium.source.connector.class=io.debezium.connector.oracle.OracleConnector
debezium.source.database.hostname=${ORACLE_HOST}
debezium.source.database.port=${ORACLE_PORT}
debezium.source.database.user=${ORACLE_USER}
debezium.source.database.password=${ORACLE_PASSWORD}
debezium.source.database.dbname=${ORACLE_SID}
debezium.source.database.pdb.name=${ORACLE_PDB}
debezium.source.database.server.name=${ORACLE_TOPIC_PREFIX}
debezium.source.schema.include.list=${ORACLE_SOURCE_DB_INCLUDE_LIST}
debezium.source.table.include.list=${ORACLE_SOURCE_TABLE_INCLUDE_LIST}
debezium.source.snapshot.mode=initial
debezium.source.schema.history.internal=io.debezium.storage.file.history.FileSchemaHistory
debezium.source.schema.history.internal.file.filename=${ORACLE_SCHEMA_HISTORY_FILE}
debezium.source.schema.history.internal.store.only.captured.tables.ddl=true

EOL
elif [[ "$ENABLE_CASSANDRA" == "true" ]]; then
    echo "Configuring Cassandra source"
    cat >> "$TMP_PROPS_FILE" << EOL
# Cassandra Source Configuration
debezium.source.connector.class=io.debezium.connector.cassandra.CassandraConnector
debezium.source.cassandra.hosts=${CASSANDRA_HOST}
debezium.source.cassandra.port=${CASSANDRA_PORT}
debezium.source.cassandra.username=${CASSANDRA_USER}
debezium.source.cassandra.password=${CASSANDRA_PASSWORD}
debezium.source.database.server.name=${CASSANDRA_TOPIC_PREFIX}
debezium.source.keyspace.include.list=${CASSANDRA_SOURCE_KEYSPACE_INCLUDE_LIST}
debezium.source.table.include.list=${CASSANDRA_SOURCE_TABLE_INCLUDE_LIST}
debezium.source.snapshot.mode=initial

EOL
fi

# Replace the application.properties file
cp "$TMP_PROPS_FILE" "$APP_PROPS_FILE"
rm "$TMP_PROPS_FILE"
echo "Application properties configured successfully"

# Start Debezium server
echo "Starting Debezium Server with the configured source"

# Try to find and execute the correct Debezium startup command
if [ -f "/debezium/run.sh" ]; then
    echo "Using /debezium/run.sh"
    exec /debezium/run.sh
elif [ -f "/opt/debezium/run.sh" ]; then
    echo "Using /opt/debezium/run.sh" 
    exec /opt/debezium/run.sh
elif ls /debezium/lib/debezium-server-*-runner.jar 1> /dev/null 2>&1; then
    echo "Using Java runner jar"
    exec java -jar /debezium/lib/debezium-server-*-runner.jar
else
    echo "Error: Cannot find Debezium startup script or JAR"
    echo "Contents of /debezium:"
    ls -la /debezium/
    exit 1
fi
